#!/usr/bin/perl
################################################################################
# Copyright (C) 2015, Lindenbaum GmbH
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# A nagios plugin to check/query values provided by the local collectd daemon.
# It's implemented as a drop-in replacement for collectd-nagios
# understanding/passing all of its command line arguments.
#
# Why?
# If you already use collectd and nagios you'll most probably use the
# collectd-nagios utility to query values from your local collectd daemon. In
# this case you (most probably) also are annoyed by the completely useless
# service output line provided by this utility. Most people can't see the
# context in something like 'CRITICAL: 1 critical, 0 warning, 0 ok'. This is
# where check_collectd will come in handy.
#
# What?
# check_collectd does exactly what collectd-nagios does but allows you to
# specify Perl sprintf format strings for its output. While -f specifies the
# format string for the service status OK, the -F switch specifies the format
# string used for service status Warning and Critical. The Unknown service
# status is outputted as returned from collectd-nagios.
#
# How?
# If provided, check_collectd will call printf with the appropriate format
# string providing the service status string as first argument. The following
# arguments depend on the specified collectd-nagios consolidation function.
# If the consolidation function is 'none' the following arguments are the values
# (in most cases floats/doubles) found in the performance data field. If one of
# the other consolidation functions is used (either 'average', 'sum' or
# 'percentage'), the respective value (also a float/double in most cases) is
# passed as the second argument following the performance data values as in the
# case of 'none'. Feel free to use or not use all or any values in your format
# string.
#
# Examples?
# To see some examples nagios commands refer to the plugins github
# repository: https://github.com/lindenbaum/check_collectd
#
# Prerequisites?
# collectd-nagios must be in the user's PATH which is the default if collectd
# was installed via package managers. Queries using collectd-nagios must be
# working (e.g. you configured the unixsock plugin correctly). Although,
# check_collectd was tested using collectd-5.5.0 and perl-5.20.3, it most
# probably also works with older versions of both tools.
################################################################################

use strict;
use warnings;

use File::Basename;
use Getopt::Std;
use Scalar::Util qw(looks_like_number);

# GLOBAL #######################################################################

# Disable excessive paranoia
$Getopt::Std::STANDARD_HELP_VERSION = 1;

# Enable auto flush
$| = 1;

# FUNCTIONS ####################################################################

# Prints version information.
sub VERSION_MESSAGE {
  my $handle = shift @_;
  my $name = basename $0;

  print $handle "$name v0.1\n";
}

# Prints help text.
sub HELP_MESSAGE {
  my $handle = shift @_;
  my $name = basename $0;

  my @help = `collectd-nagios 2>&1`;
  shift @help;

  foreach (@help) {
    s/collectd\-nagios/$name/g;
    print $handle "$_";
    if (/Valid options are:/) {
        print $handle "  -f <fmt>       The format string used when service status is OK.\n";
        print $handle "  -F <fmt>       The format string used when service status is Warning or\n";
        print $handle "                 Critical.\n";
    }
  }
  print $handle "\n";
  print $handle " Service Output Formatting:\n";
  print $handle "   fmt:          For information about the content/format of the fmt string\n";
  print $handle "                 refer to https://github.com/lindenbaum/check_collectd or\n";
  print $handle "                 look at the source using 'cat $0'.\n";
}

# Returns the values from the collectd-nagios perfdata field.
# Example: "shortterm=0.002500;;;; midterm=0.010000;;;; longterm=0.012500;;;;"
#          will return the array (0.002500, 0.010000, 0.012500)
sub perfdata {
    $_ = shift @_;

    my @matches = ();
    while (/(?:\s+)\w+=([0-9\.]+);;;;/g) {
        push @matches, $1;
    }
    return @matches;
}

# MAIN #########################################################################

# can collectd-nagios be called?
unless (0 == system "(which collectd-nagios 2>&1) > /dev/null") {
  print "UNKNOWN: 'collectd-nagios' executable not found in PATH\n";
  exit 3;
}

my %options = ();
unless (getopts 'f:F:w:c:s:n:H:g:d:hm', \%options) {
  print "UNKNOWN: invalid option in '@ARGV'\n";
  exit 3;
}

# parse options
my $ok_fmt;
my $not_ok_fmt;
my @collectd_args = ();
while (my ($k, $v) = each %options) {
  # fmt string argument is for us
  if ($k eq "f") {
    $ok_fmt = $v;
  }
  elsif ($k eq "F") {
    $not_ok_fmt = $v;
  }
  # boolean flag parameters
  elsif (looks_like_number($v) && $v == 1) {
    push @collectd_args, "-$k";
  }
  # everything else... escaped!
  elsif (defined $v) {
    push @collectd_args, "-$k '$v'";
  }
}

# call collectd-nagios
my $arg_string = join " ", @collectd_args;
my $output = `collectd-nagios $arg_string`;
unless (defined $output) {
  print "UNKNOWN: failed to execute 'collectd-nagios $arg_string'\n";
  exit 3;
}
my $retval = $? >> 8;

# Which format string has to be used?
my $fmt;
if ($retval == 0) {
  $fmt = $ok_fmt;
}
elsif ($retval == 1 || $retval == 2) {
  $fmt = $not_ok_fmt;
}

# When the appropriate format string was not specified use the original format
if (defined $fmt && $fmt !~ /^\s*$/) {
  $_ = $output;

  # Replace this clumsey OKAY strings with a simple & sane OK
  s/OKAY/OK/g;
  s/okay/ok/g;

  # Matching examples:
  # OK: 0 critical, 0 warning, 3 ok |...
  # WARNING: 0 critical, 1 warning, 0 ok |...
  # CRITICAL: 1 critical, 0 warning, 0 ok |...
  # OK: 852 sum |...
  # OK: 852 average |...
  # OK: 100.000000 percent |...
  if (/^(.+): ([0-9\.]+) (average|percent|sum) \|(.*)$/) {
    my @printf_args = ();
    push @printf_args, ($1, $2);
    my @perfdata_values = perfdata $4;
    push @printf_args, @perfdata_values;
    printf "$fmt |$4\n", @printf_args;
  }
  elsif (/^(.+):.+critical,.+warning,.+ok \|(.*)$/) {
    my @printf_args = ();
    push @printf_args, $1;
    my @perfdata_values = perfdata $2;
    push @printf_args, @perfdata_values;
    printf "$fmt |$2\n", @printf_args;
  }
  else {
    print "$output";
  }
}
else {
  print "$output";
}

exit $retval;
